
{ "posts" : [
    {
    "question_id": 1,
    "question_title": "Context",
    "question_content": "All consumers that are descendants of a Provider will re-render whenever the Provider’s value prop changes. The propagation from Provider to its descendant consumers (including .contextType and useContext) is not subject to the shouldComponentUpdate method, so the consumer is updated even when an ancestor component skips an update.",
    "question_viewcount": 128,
    "created_at": "2023-08-10T10:00:00",
    "updated_at": "2023-08-10T12:30:00",
    "user_name": "user123",
    "question_answercount": 5,
    "comments" : [
        {
            "question-comment-Id" : 1,
            "questionId" : 11,
            "userId" : 1,
            "username" : "hong1",
            "commentBody" : "It is often necessary to update the context from a component that is nested somewhere deeply in the component tree.",
            "createdAt" : "2023-08-10T14:20:00"
        }, 
        {
            "question-comment-Id" : 2,
            "questionId" : 12,
            "userId" : 2,
            "username" : "hong2",
            "commentBody" : "To keep context re-rendering fast, React needs to make each context consumer a separate node in the tree.",
            "createdAt" : "2023-08-10T14:20:00"
        },
        {
            "question-comment-Id" : 3,
            "questionId" : 13,
            "userId" : 3,
            "username" : "hong3",
            "commentBody" : "I don't know",
            "createdAt" : "2023-08-10T14:20:00"
        },        
        {
            "question-comment-Id" : 4,
            "questionId" : 14,
            "userId" : 3,
            "username" : "hong4",
            "commentBody" : "If two or more context values are often used together, you might want to consider creating your own render prop component that provides both.",
            "createdAt" : "2023-08-10T14:20:00"
        },
        {
            "question-comment-Id" : 5,
            "questionId" : 15,
            "userId" : 3,
            "username" : "hong5",
            "commentBody" : "noooooo!!!!!!!!!!",
            "createdAt" : "2023-08-10T14:20:00"
        },
                {
            "question-comment-Id" : 6,
            "questionId" : 16,
            "userId" : 3,
            "username" : "hong6",
            "commentBody" : "To get around this, lift the value into the parent’s state",
            "createdAt" : "2023-08-10T14:20:00"
        }
    ],
    "Answer" : [
        {
            "answer_Id" : 1,
            "question_id" : 1,
            "user_id" : 1,
            "username" : "Mike",
            "content" : "When a ref is passed to an element in render, a reference to the node becomes accessible at the current attribute of the ref.",
            "accepted" : false,
            "recommendation" : 32,
            "created_at" : "2023-08-10T14:20:00",
            "comment" : [
                {
                "answer-comment-Id" : 1,
                "answer_id" : 1,
                "userId" : 4,
                "username" : "Nico",
                "commentBody" : "Each JSX element is just syntactic sugar for calling React.createElement(component, props, ...children). So, anything you can do with JSX can also be done with just plain JavaScript.",
                "createdAt" : "2023-08-10T14:20:00"
                }
            ]
        }, 
        {
            "answer_Id" : 2,
            "question_id" : 1,
            "user_id" : 2,
            "username" : "Sam",
            "content" : "Creates a Context object. When React renders a component that subscribes to this Context object it will read the current context value from the closest matching Provider above it in the tree.",
            "accepted" : false,
            "recommendation" : 234,
            "created_at" : "2023-08-10T14:20:00",
            "comment" : [
                {
                "answer-comment-Id" : 1,
                "answer_id" : 2,
                "userId" : 3,
                "username" : "ho",
                "commentBody" : "In a typical React application, data is passed top-down (parent to child) via props, but such usage can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.",
                "createdAt" : "2023-08-10T14:20:00"
                },
                {
                "answer-comment-Id" : 2,
                "answer_id" : 2,
                "userId" : 3,
                "username" : "MY",
                "commentBody" : "Context is designed to share data that can be considered “global” for a tree of React components, such as the current authenticated user, theme, or preferred language. For example, in the code below we manually thread through a “theme” prop in order to style the Button component:",
                "createdAt" : "2023-08-10T14:20:00"
                },
                {
                "answer-comment-Id" : 3,
                "answer_id" : 2,
                "userId" : 3,
                "username" : "smith",
                "commentBody" : "Context is primarily used when some data needs to be accessible by many components at different nesting levels. Apply it sparingly because it makes component reuse more difficult.",
                "createdAt" : "2023-08-10T14:20:00"
                },
                {
                "answer-comment-Id" : 4,
                "answer_id" : 2,
                "userId" : 3,
                "username" : "jasmine",
                "commentBody" : "It might feel redundant to pass down the user and avatarSize props through many levels if in the end only the Avatar component really needs it. It’s also annoying that whenever the Avatar component needs more props from the top, you have to add them at all the intermediate levels too.",
                "createdAt" : "2023-08-10T14:20:00"
                },
                {
                "answer-comment-Id" : 5,
                "answer_id" : 2,
                "userId" : 3,
                "username" : "",
                "commentBody" : "One way to solve this issue without context is to pass down the Avatar component itself so that the intermediate components don’t need to know about the user or avatarSize props:",
                "createdAt" : "2023-08-10T14:20:00"
                },
                {
                "answer-comment-Id" : 6,
                "answer_id" : 2,
                "userId" : 3,
                "username" : "J",
                "commentBody" : "This inversion of control can make your code cleaner in many cases by reducing the amount of props you need to pass through your application and giving more control to the root components. Such inversion, however, isn’t the right choice in every case; moving more complexity higher in the tree makes those higher-level components more complicated and forces the lower-level components to be more flexible than you may want.",
                "createdAt" : "2023-08-10T14:20:00"
                }
            ]
        },
        {
            "answer_Id" : 3,
            "question_id" : 1,
            "user_id" : 1,
            "username" : "React",
            "content" : "Refs are created using React.createRef() and attached to React elements via the ref attribute. Refs are commonly assigned to an instance property when a component is constructed so they can be referenced throughout the component.",
            "accepted" : false,
            "recommendation" : 32,
            "created_at" : "2023-08-10T14:20:00",
            "comment" : [
                {
                "answer-comment-Id" : 1,
                "answer_id" : 1,
                "userId" : 4,
                "username" : "Coco",
                "commentBody" : "If you use this shorthand form for React.createElement, it can be almost as convenient to use React without JSX.",
                "createdAt" : "2023-08-10T14:20:00"
                }
            ]
        },
         {
            "answer_Id" : 4,
            "question_id" : 1,
            "user_id" : 1,
            "username" : "",
            "content" : "If you get tired of typing React.createElement so much, one common pattern is to assign a shorthand:",
            "accepted" : false,
            "recommendation" : 95,
            "created_at" : "2023-08-10T14:20:00",
            "comment" : [
                {
                "answer-comment-Id" : 1,
                "answer_id" : 1,
                "userId" : 4,
                "username" : "Ted",
                "commentBody" : "Your first inclination may be to use refs to “make things happen” in your app. If this is the case, take a moment and think more critically about where state should be owned in the component hierarchy.",
                "createdAt" : "2023-08-10T14:20:00"
                }
            ]
        },
         {
            "answer_Id" : 5,
            "question_id" : 1,
            "user_id" : 1,
            "username" : "Peter",
            "content" : "This pattern is sufficient for many cases when you need to decouple a child from its immediate parents. You can take it even further with render props if the child needs to communicate with the parent before rendering",
            "accepted" : false,
            "recommendation" : 32,
            "created_at" : "2023-08-10T14:20:00",
            "comment" : [
                {
                "answer-comment-Id" : 1,
                "answer_id" : 1,
                "userId" : 4,
                "username" : "Ancel",
                "commentBody" : "If you’re curious to see more examples of how JSX is converted to JavaScript, you can try out the online Babel compiler.",
                "createdAt" : "2023-08-10T14:20:00"
                }
            ]
        },
         {
            "answer_Id" : 6,
            "question_id" : 1,
            "user_id" : 1,
            "username" : "Mark",
            "content" : "However, sometimes the same data needs to be accessible by many components in the tree, and at different nesting levels. Context lets you “broadcast” such data, and changes to it, to all components below. Common examples where using context might be simpler than the alternatives include managing the current locale, theme, or a data cache.",
            "accepted" : false,
            "recommendation" : 1234,
            "created_at" : "2023-08-10T14:20:00",
            "comment" : [
                {
                "answer-comment-Id" : 1,
                "answer_id" : 1,
                "userId" : 4,
                "username" : "Jimmy",
                "commentBody" : "React previously shipped with an experimental context API. The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.",
                "createdAt" : "2023-08-10T14:20:00"
                },
                {
                 "answer-comment-Id" : 2,
                "answer_id" : 2,
                "userId" : 3,
                "username" : "MY",
                "commentBody" : "Context is designed to share data that can be considered “global” for a tree of React components, such as the current authenticated user, theme, or preferred language. For example, in the code below we manually thread through a “theme” prop in order to style the Button component:",
                "createdAt" : "2023-08-10T14:20:00"
                },
                {
                "answer-comment-Id" : 3,
                "answer_id" : 2,
                "userId" : 3,
                "username" : "smith",
                "commentBody" : "Context is primarily used when some data needs to be accessible by many components at different nesting levels. Apply it sparingly because it makes component reuse more difficult.",
                "createdAt" : "2023-08-10T14:20:00"
                },
                {
                "answer-comment-Id" : 4,
                "answer_id" : 2,
                "userId" : 3,
                "username" : "jasmine",
                "commentBody" : "It might feel redundant to pass down the user and avatarSize props through many levels if in the end only the Avatar component really needs it. It’s also annoying that whenever the Avatar component needs more props from the top, you have to add them at all the intermediate levels too.",
                "createdAt" : "2023-08-10T14:20:00"
                },
                {
                "answer-comment-Id" : 5,
                "answer_id" : 2,
                "userId" : 3,
                "username" : "",
                "commentBody" : "One way to solve this issue without context is to pass down the Avatar component itself so that the intermediate components don’t need to know about the user or avatarSize props:",
                "createdAt" : "2023-08-10T14:20:00"
                },
                {
                "answer-comment-Id" : 6,
                "answer_id" : 2,
                "userId" : 3,
                "username" : "J",
                "commentBody" : "This inversion of control can make your code cleaner in many cases by reducing the amount of props you need to pass through your application and giving more control to the root components. Such inversion, however, isn’t the right choice in every case; moving more complexity higher in the tree makes those higher-level components more complicated and forces the lower-level components to be more flexible than you may want.",
                "createdAt" : "2023-08-10T14:20:00"
                }
            ]
        }
    ]
    }
]
}